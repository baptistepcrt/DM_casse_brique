"""--------------------------------------------------------------------------
    Jeu de casse brique
    Batiste PECOURT 
    Version 2.0 - 03/12/2022
      - Vitesse incrémentale
--------------------------------------------------------------------------"""

import pyxel
from math import floor
import random

"""--------------------------------------------------------------------------
                                CONSTANTES
--------------------------------------------------------------------------"""

""" COULEUR """
# couleur standard pyxel
COLOR_NOIR = 0
COLOR_VIOLET = 2
COLOR_BLEU = 5
COLOR_BLANC = 7
COLOR_ROUGE = 8
COLOR_JAUNE = 10
COLOR_VERT = 11

""" ECRAN """
# taille de la fenetre
WIN_WITDH = 300
WIN_HEIGHT = 300

""" BALLE """
# couleur de la balle
BALLE_COLOR = COLOR_BLEU
# rayon de la balle
BALLE_RAYON = 4
# vitesse balle
BALLE_VITESSE = 5
BALLE_VITESSE_FACTEUR = 1.5 #v2.0

""" PLATEAU """
PLATEAU_COLOR = COLOR_VIOLET
# taille du plateau
PLATEAU_WITDH = 50
PLATEAU_HEIGHT = 20
PLATEAU_BORD = 20 #v2.0
PLATEAU_HEIGHT2 = BALLE_VITESSE * (BALLE_VITESSE_FACTEUR ** 2) #v2.0
# position initiale plateau au centre
# (origine des positions : coin haut gauche)
PLATEAU_X = (WIN_WITDH - PLATEAU_WITDH) / 2
PLATEAU_Y = 250
# vitesse du plateau
PLATEAU_VITESSE = 5

""" BRIQUES """
# nombre de briques
BRIQUE_N_LIGNES = 3 # un type par ligne
BRIQUE_N_COLONNES = 8
BRIQUE_N = BRIQUE_N_LIGNES * BRIQUE_N_COLONNES
# couleurs des briques, une couleur par type
BRIQUE_SUPPRIMER = COLOR_NOIR
BRIQUE_COLOR = [COLOR_ROUGE, COLOR_JAUNE, COLOR_VERT]
# score brique par type
BRIQUE_SCORE = [30, 20, 10]
# taille des briques
BRIQUE_INTERVAL = 2
BRIQUE_WITDH = WIN_WITDH / BRIQUE_N_COLONNES - BRIQUE_INTERVAL
BRIQUE_HEIGHT = 10
# position des briques
BRIQUE_X = BRIQUE_INTERVAL / 2
BRIQUE_Y = 30

""" TEXTES """
# couleur des textes
TEXTE_COLOR = COLOR_BLANC
# position des textes
SCORE_X, SCORE_Y = 20, 10
VIES_X, VIES_Y = WIN_WITDH - 50, 10
GAME_OVER_X, GAME_OVER_Y = WIN_WITDH / 2 - 18, WIN_HEIGHT / 2
VIES_MSG_X, VIES_MSG_Y = WIN_WITDH / 2 - 32, WIN_HEIGHT / 2 + 20

""" JEU """
VIES_DEBUT = 3

"""--------------------------------------------------------------------------
                                FONCTIONS
--------------------------------------------------------------------------"""
    
"""
    Gestion du déplacement du plateau en fonction des touches flèches
"""
def plateau_deplacement():
    global p_x, p_y
    # touche fleche gauche
    if pyxel.btn(pyxel.KEY_LEFT):
        if (p_x - PLATEAU_BORD >= PLATEAU_VITESSE) :
            p_x = p_x - PLATEAU_VITESSE
    # touche fleche droite
    if pyxel.btn(pyxel.KEY_RIGHT):
        if (p_x + PLATEAU_WITDH + PLATEAU_BORD <= WIN_WITDH - PLATEAU_VITESSE) :
            p_x = p_x + PLATEAU_VITESSE
            
"""
    Paramètres initiaux de la balle à chaque session
"""
def balle_initialisation():
    global b_x, b_y, b_vx, b_vy, balle_active
    # activation balle (inactive au départ)
    balle_active = False
    # position initiale de la balle
    b_x = p_x + (PLATEAU_WITDH + BALLE_RAYON) / 2
    b_y = p_y - (BALLE_RAYON + 1)
    # vitesse initiale de la balle aléatoire en x de 10 à 100% de V
    b_vx = floor(random.randint(10, 100) / 100 * BALLE_VITESSE)
    b_vx *= 2 * random.randint(0, 1) - 1 # signe pos ou neg
    # complement Vy pour avoir un module = BALLE_VITESSE
    b_vy = -((BALLE_VITESSE ** 2 - b_vx ** 2) ** 0.5)
    
"""
    Gestion deplacement de la balle et détection des collisions
"""
def balle_deplacement():
    global b_x, b_y, b_vx, b_vy, balle_active, score, brique_n
    # pas de fin de partie par défaut
    game_over = False
    # déplacement de la balle
    b_x += b_vx
    b_y += b_vy
    # collision bord gauche
    if b_x - BALLE_RAYON <= 0:
        b_vx = -b_vx
    # collision bord haut
    elif b_y - BALLE_RAYON <= 0:
        b_vy = -b_vy
    # collision bord droit
    elif b_x + BALLE_RAYON >= WIN_HEIGHT:
        b_vx = -b_vx
    # collision dessus plateau
    elif b_x + BALLE_RAYON >= p_x and b_x - BALLE_RAYON <= p_x + PLATEAU_WITDH and b_y + BALLE_RAYON >= p_y and b_y - BALLE_RAYON <= p_y:
        b_vy = -b_vy
    # collision coté gauche plateau
    elif b_x + BALLE_RAYON >= p_x - PLATEAU_BORD and b_x - BALLE_RAYON <= p_x and b_y + BALLE_RAYON >= p_y and b_y + BALLE_RAYON <= p_y + PLATEAU_HEIGHT and pyxel.pget(b_x + b_vx, b_y + b_vy) == PLATEAU_COLOR:
        b_vy = -b_vy
    # collision coté droit plateau
    elif b_x + BALLE_RAYON >= p_x + PLATEAU_WITDH and b_x - BALLE_RAYON <= p_x + PLATEAU_WITDH + PLATEAU_BORD and b_y + BALLE_RAYON >= p_y and b_y + BALLE_RAYON <= p_y + PLATEAU_HEIGHT and pyxel.pget(b_x + b_vx, b_y + b_vy) == PLATEAU_COLOR:
        b_vy = -b_vy
    # collision bord bas
    elif b_y - BALLE_RAYON >= WIN_HEIGHT:
        game_over = True
    # collision avec brique type n
    else:
        for i in range(BRIQUE_N_LIGNES):
            if pyxel.pget(b_x + b_vx, b_y + b_vy) == BRIQUE_COLOR[i]:
                j = floor((b_x + b_vx) / (BRIQUE_WITDH + BRIQUE_INTERVAL))
                if j >= 0 and j < BRIQUE_N_COLONNES :
                    brique_color[i][j] = BRIQUE_SUPPRIMER 
                    brique_n += 1
                    b_vy = -b_vy
                    score += BRIQUE_SCORE[i]
                    #v2.0 test si derniere brique de la ligne
                    # alors incrémentation de la vitesse
                    sum = 0
                    for c in range(BRIQUE_N_COLONNES):
                        sum += brique_color[i][c]
                    if sum == 0:
                        b_vx *= BALLE_VITESSE_FACTEUR
                        b_vy *= BALLE_VITESSE_FACTEUR
    return game_over
                
"""
    UPDATE POUR PYXEL RUN
    mise à jour des variables avant l'appel de DRAW
"""
def update():
    global balle_active, vies
    # mise à jour de la position du plateau
    if balle_active:
        plateau_deplacement()
    # touche ESPACE : lancement de la session
    if pyxel.btnr(pyxel.KEY_SPACE):
        balle_active = True
    # mise à jour jeu
    if balle_active:
        if balle_deplacement(): # si game over
            balle_initialisation()
            if vies >= 0: #v2.0
                vies = vies - 1

"""
    DRAW POUR PYXEL RUN 
    redessine les objets (30 fois par seconde)
"""
def draw():
    # vide la fenetre
    pyxel.cls(0)
    # textes
    pyxel.text(SCORE_X, SCORE_Y, 'SCORE: %d' % score, TEXTE_COLOR)
    pyxel.text(VIES_X, VIES_Y, 'VIES: %d' % vies, TEXTE_COLOR)
    # s'il reste des vies le jeu continue
    if vies > 0:    
        # plateau : carré central, coins gauche et droit, puis base
        pyxel.rect(p_x, p_y, PLATEAU_WITDH, PLATEAU_HEIGHT, PLATEAU_COLOR)
        pyxel.tri(p_x, p_y, p_x, p_y + PLATEAU_HEIGHT, p_x - PLATEAU_BORD, p_y + PLATEAU_HEIGHT, PLATEAU_COLOR)
        pyxel.tri(p_x + PLATEAU_WITDH, p_y, p_x + PLATEAU_WITDH, p_y + PLATEAU_HEIGHT, p_x + PLATEAU_WITDH + PLATEAU_BORD, p_y + PLATEAU_HEIGHT, PLATEAU_COLOR) 
        pyxel.rect(p_x - PLATEAU_BORD, p_y + PLATEAU_HEIGHT, PLATEAU_WITDH + 2 * PLATEAU_BORD + 1, PLATEAU_HEIGHT2, PLATEAU_COLOR) #v2.0
        # balle
        pyxel.circ(b_x, b_y, BALLE_RAYON, BALLE_COLOR)
        # briques
        for i in range(BRIQUE_N_LIGNES):
            for j in range(BRIQUE_N_COLONNES):
                if brique_color[i][j] != BRIQUE_SUPPRIMER:
                    pyxel.rect(BRIQUE_X + j * (BRIQUE_WITDH + BRIQUE_INTERVAL), BRIQUE_Y + i * (BRIQUE_HEIGHT + BRIQUE_INTERVAL), BRIQUE_WITDH, BRIQUE_HEIGHT, brique_color[i][j]) 
        if vies < VIES_DEBUT and not balle_active:
            pyxel.text(VIES_MSG_X, VIES_MSG_Y, 'UNE VIE DE MOINS !', TEXTE_COLOR)
        if brique_n == BRIQUE_N: # fin de partie gagné
            pyxel.text(GAME_OVER_X, GAME_OVER_Y, '* GAGNE *', TEXTE_COLOR)
            initialisation()
    # sinon: GAME OVER
    else:
        pyxel.text(GAME_OVER_X, GAME_OVER_Y, 'GAME OVER', TEXTE_COLOR)

def initialisation():
    global score, vies, brique_n, p_x, p_y, brique_color
    # score et vies
    score = 0
    vies = VIES_DEBUT
    brique_n = 0
    # position initiale du plateau
    p_x, p_y = PLATEAU_X, PLATEAU_Y
    # initialisation de la balle
    balle_initialisation()
    # creation des briques
    brique_color = [[BRIQUE_COLOR[i]] * BRIQUE_N_COLONNES for i in range(BRIQUE_N_LIGNES)]

"""--------------------------------------------------------------------------
                                    MAIN
--------------------------------------------------------------------------"""

# init des paramètres du jeu
initialisation()
# création de la fenêtre du jeu
pyxel.init(WIN_WITDH, WIN_HEIGHT, title="Casse Brique")
# boucle infini du jeu
pyxel.run(update, draw)
